<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sample.dao.BookDao">

	<!-- 
		<resultMap>은 select 문으로 조회된 데이터의 컬럼명과 resultType에서 지정한 클래스의 프로퍼티명이 서로 다를 때, 
		컬럼과 프로퍼티를 매핑시킨다.
		<id />태그에는 primary key에 해당하는 컬럼을 정의한다.
		조회결과를 담기 위해서 <resultMap />을 사용할 때는 반드시 <resultMap />에서 매핑하는 컬럼이 조회결과에 모두 포함되어 있어야 한다.	
		
		<select />태그에서 정의된 resultMap을 사용하기
			
			<select id="getAllBooks" resultMap="BookResultMap">
				select *
				from sample_spring_books
			</select>	
			+ mybatis는 정의된 BookResultMap을 참조해서 type에 명시된 com.sample.vo.Book객체를 생성한다.
			+ mybatis는 조회결과의 각 컬럼값을 Book객체의 어느 멤버변수에 저장해야 할지를 <result />태그의 정보를 참조한다.
	 -->
	<resultMap id="BookResultMap" type="com.sample.vo.Book">
		<id column="book_no" 					property="no"/>
		<result column="book_title" 			property="title"/>
		<result column="book_author" 			property="author"/>
		<result column="book_publisher" 		property="publisher"/>
		<result column="book_price" 			property="price"/>
		<result column="book_discount_price" 	property="discountPrice"/>
		<result column="book_pub_date" 			property="pubDate"/>
		<result column="book_stock" 			property="stock"/>
		<result column="book_updated_date" 		property="updatedDate"/>
		<result column="book_created_date" 		property="createdDate"/>
	</resultMap> 

	<!-- 
		void insertBook(Book book); 메소드와 매핑되는 SQL 구문 정의
	 -->
	<insert id="insertBook" parameterType="com.sample.vo.Book">
		insert into sample_spring_books
		(book_no, book_title, book_author, book_publisher, book_price, book_discount_price, book_pub_date, book_stock)
		values
		(books_seq.nextval, #{title}, #{author}, #{publisher}, #{price}, #{discountPrice}, #{pubDate}, #{stock})
	</insert>
	
	<!-- 
		void updateBook(Book book); 메소드와 매핑되는 SQL 구문 정의
	 -->
	<update id="updateBook" parameterType="com.sample.vo.Book">
		update sample_spring_books
		set
			book_title = #{title},
			book_author = #{author},
			book_publisher = #{publisher},
			book_price = #{price},
			book_discount_price = #{discountPrice},
			book_stock = #{stock},
			book_updated_date = sysdate
		where
			book_no = #{no}
	</update>
	
	<select id="getBooksTotalRows" parameterType="com.sample.form.Criteria" resultType="int">
		select count(*)
		from sample_spring_books
		<where>
			<if test="opt != null and value != null">
				<choose>
					<when test="opt == '제목'">
						book_title like '%' || #{value} || '%'
					</when>
					<when test="opt == '저자'">
						book_author = #{value}
					</when>
					<when test="opt == '출판사'">
						book_publisher = #{value}
					</when>
					<when test="opt == '최소가격'">
						book_price >= to_number(#{value})
					</when>
					<when test="opt == '최대가격'">
						book_price &lt;= to_number(#{value})
					</when>
				</choose>
			</if>
		</where>			
	</select>
	
	<!-- 
		List<Book> searchBooks(Criteria criteria); 메소드와 매핑되는 SQL 구문 정의
		
		<where 태그>
			+ <where> 태그안에 sql문이 포함되면 where 키워드로 변경된다.
			+ <where> 태그안에 sql문중에서 첫번째 sql문이 "and 컬럼명 = 값" 의 형태면 and를 제거한다. 
	 -->
	<select id="searchBooks" parameterType="com.sample.form.Criteria" resultMap="BookResultMap">
		select *
		from (
			select A.*, row_number() over (order by book_no desc) rn
			from sample_spring_books A
			<where>
				<if test="opt != null and value != null">
					<choose>
						<when test="opt == '제목'">
							book_title like '%' || #{value} || '%'
						</when>
						<when test="opt == '저자'">
							book_author = #{value}
						</when>
						<when test="opt == '출판사'">
							book_publisher = #{value}
						</when>
						<when test="opt == '최소가격'">
							book_price >= to_number(#{value})
						</when>
						<when test="opt == '최대가격'">
							book_price &lt;= to_number(#{value})
						</when>
					</choose>
				</if>
			</where>			
		)
		where rn between #{beginIndex} and #{endIndex}
	</select> 
	
	
	<!-- 
		List<Book> getAllBooks(); 메소드와	 매핑되는 SQL 구문정의
	 -->
	<select id="getAllBooks" resultMap="BookResultMap">
		select
			*
		from 
			sample_spring_books
		order by
			book_no desc
	</select>
	
	<select id="searchBooksByTitle" parameterType="string" resultMap="BookResultMap">
		select
			*
		from 
			sample_spring_books
		where
			book_title like '%' || #{value} || '%'
		order by
			book_no desc
	</select>
	
	<!-- 
		List<Book> searchBooksByPrice(@Param("minPrice") int minPrice, @Param("maxPrice") int maxPrice);
		위와 같은 메소드에 매핑되는 SQL 구문정의
		
		+ 매퍼 인터페이스 메소드의 매개변수가 2개 이상일 때는 @Param 어노테이션을 이용해서 SQL에 전달하는 파라미터값의 이름을 지정할 수 있다. 
		+ @Param을 사용해서 파라미터 이름을 지정했을 때는 SQL 구문을 정의하는 태그에서 parameterType 속성을 작성할 필요가 없다.
	 -->
	<select id="searchBooksByPrice" resultMap="BookResultMap">
		select
			*
		from 
			sample_spring_books
		where
			booke_price >= #{minPrice} and book_price &lt;= #{maxPrice}
		order by
			book_price asc
	</select>
	
	<select id="getBookByNo" parameterType="int" resultType="com.sample.vo.Book">
		select
			book_no						as no,
			book_title					as title,
			book_author					as author,
			book_publisher				as publisher,
			book_price					as price,	
			book_discount_price			as discountPrice,
			book_pub_date				as pubDate,
			book_stock					as stock,
			book_updated_date			as updatedDate,
			book_created_date			as createdDate
		from 
			sample_spring_books
		where
			book_no = #{value}
	</select>
</mapper>














